version: '3'

services:
  db:
    image: "postgres:alpine"
    container_name: "postgres"
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=rootpw
      - POSTGRES_DB=dataflow
    ports:
      - "5432:5432"
    volumes:
      - /Volumes/LaCie/Dev/docker/scdfdata:/var/lib/postgresql/data

  kafka-broker:
    image: confluentinc/cp-kafka:5.3.1
    container_name: dataflow-kafka
    expose:
     - "9092"
    environment:
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-broker:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_HOST_NAME=kafka-broker
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper

  zookeeper:
    image: confluentinc/cp-zookeeper:5.3.1
    container_name: dataflow-kafka-zookeeper
    expose:
      - "2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181

#  message_broker:
#    image: "rabbitmq"
#    container_name: "rabbitmq"
#    environment:
#      RABBITMQ_DEFAULT_USER: "guest"
#      RABBITMQ_DEFAULT_PASS: "guest"
#      RABBITMQ_DEFAULT_VHOST: "/"
#    ports:
#      - "15672:15672"
#      - "5672:5672"
#    volumes:
#      - "./enabled_plugins:/etc/rabbitmq/enabled_plugins"

  dataflow-server:
    image: springcloud/spring-cloud-dataflow-server:${DATAFLOW_VERSION:?DATAFLOW_VERSION is not set!}
    container_name: dataflow-server
    ports:
      - "9393:9393"
    environment:
      - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.stream.kafka.binder.brokers=PLAINTEXT://kafka-broker:9092
      - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.stream.kafka.streams.binder.brokers=PLAINTEXT://kafka-broker:9092
      - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.stream.kafka.binder.zkNodes=zookeeper:2181
      - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.stream.kafka.streams.binder.zkNodes=zookeeper:2181
      - spring.cloud.skipper.client.serverUri=http://skipper-server:7577/api
      - spring.cloud.dataflow.applicationProperties.stream.management.metrics.export.prometheus.enabled=true
      - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.streamapp.security.enabled=false
      - spring.cloud.dataflow.applicationProperties.stream.management.endpoints.web.exposure.include=prometheus,info,health
      - spring.cloud.dataflow.grafana-info.url=http://localhost:3000
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/dataflow
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=rootpw
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
    depends_on:
      - kafka-broker
    volumes:
      - /Volumes/LaCie/Dev/m2:/root/.m2/repository
      #- ~/.m2/repository:/root/.m2/repository
    entrypoint: "./wait-for-it.sh db:5432 -- java -jar /maven/spring-cloud-dataflow-server.jar"

  skipper-server:
    image: springcloud/spring-cloud-skipper-server:${SKIPPER_VERSION:?SKIPPER_VERSION is not set!}
    container_name: skipper
    ports:
      - "7577:7577"
      - "9000-9010:9000-9010"
      - "20000-20105:20000-20105"
    environment:
      - SPRING_CLOUD_SKIPPER_SERVER_PLATFORM_LOCAL_ACCOUNTS_DEFAULT_PORTRANGE_LOW=20000
      - SPRING_CLOUD_SKIPPER_SERVER_PLATFORM_LOCAL_ACCOUNTS_DEFAULT_PORTRANGE_HIGH=20100
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/dataflow
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=rootpw
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
    volumes:
      - /Volumes/LaCie/Dev/m2:/root/.m2/repository
      #- ~/.m2/repository:/root/.m2/repository
    entrypoint: "./wait-for-it.sh db:5432 -- java -Djava.security.egd=file:/dev/./urandom -jar /maven/spring-cloud-skipper-server.jar"

  # Grafana is configured with the Prometheus datasource.
  # Use `docker exec -it prometheus /bin/sh` to logging in the container
  prometheus:
    image: springcloud/spring-cloud-dataflow-prometheus-local:${DATAFLOW_VERSION:?DATAFLOW_VERSION is not set! Use 'export DATAFLOW_VERSION=local-server-image-tag'}
    container_name: prometheus
    volumes:
      - 'scdf-targets:/etc/prometheus/'
    ports:
      - '9090:9090'
    depends_on:
      - service-discovery

  # The service-discovery container. Required for Prometheus setup only
  # Use `docker exec -it service-discovery /bin/sh` to logging the container
  service-discovery:
    image: springcloud/spring-cloud-dataflow-prometheus-service-discovery:0.0.4.RELEASE
    container_name: service-discovery
    volumes:
      - 'scdf-targets:/tmp/scdf-targets/'
    expose:
      - '8181'
    ports:
      - '8181:8181'
    environment:
      - metrics.prometheus.target.cron=0/20 * * * * *
      - metrics.prometheus.target.filePath=/tmp/scdf-targets/targets.json
      - metrics.prometheus.target.discoveryUrl=http://dataflow-server:9393/runtime/apps
      - metrics.prometheus.target.overrideIp=skipper-server
      - server.port=8181
    depends_on:
      - dataflow-server

  # Grafana SCDF Prometheus pre-built image:
  grafana:
    image: springcloud/spring-cloud-dataflow-grafana-prometheus:${DATAFLOW_VERSION:?DATAFLOW_VERSION is not set! Use 'export DATAFLOW_VERSION=local-server-image-tag'}
    container_name: grafana
    ports:
      - '3000:3000'

volumes:
  scdf-targets:


#version: '3'
#
## Configuration environment variables:
## - DATAFLOW_VERSION and SKIPPER_VERSION specify what DataFlow and Skipper image versions to use.
## - STREAM_APPS_URI and TASK_APPS_URI are used to specify what Stream and Task applications to pre-register.
## - HOST_MOUNT_PATH and DOCKER_MOUNT_PATH are used to set the host and docker mount folders.
##   If not set HOST_MOUNT_PATH defaults to the local host folder where the docker compose is being started.
##   If not set DOCKER_MOUNT_PATH defaults to /root/scdf on dataflow-server and skipper containers.
##   Example to mount the local Maven repository: HOST_MOUNT_PATH=~/.m2/repository/ DOCKER_MOUNT_PATH=/root/.m2  docker-compose up
##
## Exposed container ports:
## - 9393:9393               - Data Flow server port (http://localhost:9393/dashboard)
## - 7577:7577               - Skipper server port (http://localhost:7577/api)
## - 20000-20105:20000-20105 - Port range for all deployed stream applications. That means you can reach the
##                             application's actuator endpoints from your host machine.
#services:
#  db:
#    image: "postgres:alpine"
#    container_name: "postgres"
#    environment:
#      - POSTGRES_USER=root
#      - POSTGRES_PASSWORD=rootpw
#      - POSTGRES_DB=dataflow
#    ports:
#      - "5432:5432"
#    volumes:
#      - /Volumes/LaCie/Dev/docker/scdfdata:/var/lib/postgresql/data
#
#  kafka-broker:
#    image: confluentinc/cp-kafka:5.3.1
#    container_name: dataflow-kafka
#    expose:
#      - "9092"
#    environment:
#      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-broker:9092
#      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
#      - KAFKA_ADVERTISED_HOST_NAME=kafka-broker
#      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
#    depends_on:
#      - zookeeper
#
#  zookeeper:
#    image: confluentinc/cp-zookeeper:5.3.1
#    container_name: dataflow-kafka-zookeeper
#    expose:
#      - "2181"
#    environment:
#      - ZOOKEEPER_CLIENT_PORT=2181
#
#  dataflow-server:
#    image: springcloud/spring-cloud-dataflow-server:${DATAFLOW_VERSION:?DATAFLOW_VERSION is not set!}
#    container_name: dataflow-server
#    ports:
#      - "9393:9393"
#    environment:
#      - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.stream.kafka.binder.brokers=PLAINTEXT://kafka-broker:9092
#      - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.stream.kafka.streams.binder.brokers=PLAINTEXT://kafka-broker:9092
#      - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.stream.kafka.binder.zkNodes=zookeeper:2181
#      - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.stream.kafka.streams.binder.zkNodes=zookeeper:2181
#      - spring.cloud.skipper.client.serverUri=http://skipper-server:7577/api
#      - spring.cloud.dataflow.applicationProperties.stream.management.metrics.export.prometheus.enabled=true
#      - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.streamapp.security.enabled=false
#      - spring.cloud.dataflow.applicationProperties.stream.management.endpoints.web.exposure.include=prometheus,info,health
#      - spring.cloud.dataflow.grafana-info.url=http://localhost:3000
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/dataflow
#      - SPRING_DATASOURCE_USERNAME=root
#      - SPRING_DATASOURCE_PASSWORD=rootpw
#      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
#    depends_on:
#      - kafka-broker
#    entrypoint: "./wait-for-it.sh db:5432 -- java -jar /maven/spring-cloud-dataflow-server.jar"
#    volumes:
#      - ${HOST_MOUNT_PATH:-.}:${DOCKER_MOUNT_PATH:-/root/scdf}
#      - /Volumes/LaCie/Dev/m2:/root/.m2/repository

#  app-import:
#    image: springcloud/openjdk:2.0.0.RELEASE
#    container_name: dataflow-app-import
#    depends_on:
#      - dataflow-server
#    command: >
#      /bin/sh -c "
#        ./wait-for-it.sh -t 180 dataflow-server:9393;
#        wget -qO- 'http://dataflow-server:9393/apps' --post-data='uri=${STREAM_APPS_URI:-https://dataflow.spring.io/kafka-maven-latest&force=true}';
#        echo 'Stream apps imported'
#        wget -qO- 'http://dataflow-server:9393/apps' --post-data='uri=${TASK_APPS_URI:-https://dataflow.spring.io/task-maven-latest&force=true}';
#        echo 'Task apps imported'"

#  skipper-server:
#    image: springcloud/spring-cloud-skipper-server:${SKIPPER_VERSION:?SKIPPER_VERSION is not set!}
#    container_name: skipper
#    ports:
#      - "7577:7577"
#      - "9000-9010:9000-9010"
#      - "20000-20105:20000-20105"
#    environment:
#      - SPRING_CLOUD_SKIPPER_SERVER_PLATFORM_LOCAL_ACCOUNTS_DEFAULT_PORTRANGE_LOW=20000
#      - SPRING_CLOUD_SKIPPER_SERVER_PLATFORM_LOCAL_ACCOUNTS_DEFAULT_PORTRANGE_HIGH=20100
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/dataflow
#      - SPRING_DATASOURCE_USERNAME=root
#      - SPRING_DATASOURCE_PASSWORD=rootpw
#      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
#    volumes:
#      - /Volumes/LaCie/Dev/m2:/root/.m2/repository
#      #- ${HOST_MOUNT_PATH:-.}:${DOCKER_MOUNT_PATH:-/root/scdf}
#    entrypoint: "./wait-for-it.sh db:5432 -- java -Djava.security.egd=file:/dev/./urandom -jar /spring-cloud-skipper-server.jar"
#
#
#
#  # Grafana is configured with the Prometheus datasource.
#  # Use `docker exec -it prometheus /bin/sh` to logging in the container
#  prometheus:
#    image: springcloud/spring-cloud-dataflow-prometheus-local:${DATAFLOW_VERSION:?DATAFLOW_VERSION is not set! Use 'export DATAFLOW_VERSION=local-server-image-tag'}
#    container_name: prometheus
#    volumes:
#      - 'scdf-targets:/etc/prometheus/'
#    ports:
#      - '9090:9090'
#    depends_on:
#      - service-discovery
#
#  # The service-discovery container. Required for Prometheus setup only
#  # Use `docker exec -it service-discovery /bin/sh` to logging the container
#  service-discovery:
#    image: springcloud/spring-cloud-dataflow-prometheus-service-discovery:0.0.4.RELEASE
#    container_name: service-discovery
#    volumes:
#      - 'scdf-targets:/tmp/scdf-targets/'
#    expose:
#      - '8181'
#    ports:
#      - '8181:8181'
#    environment:
#      - metrics.prometheus.target.cron=0/20 * * * * *
#      - metrics.prometheus.target.filePath=/tmp/scdf-targets/targets.json
#      - metrics.prometheus.target.discoveryUrl=http://dataflow-server:9393/runtime/apps
#      - metrics.prometheus.target.overrideIp=skipper-server
#      - server.port=8181
#    depends_on:
#      - dataflow-server
#
#  # Grafana SCDF Prometheus pre-built image:
#  grafana:
#    image: springcloud/spring-cloud-dataflow-grafana-prometheus:${DATAFLOW_VERSION:?DATAFLOW_VERSION is not set! Use 'export DATAFLOW_VERSION=local-server-image-tag'}
#    container_name: grafana
#    ports:
#      - '3000:3000'
#
#volumes:
#  scdf-targets: